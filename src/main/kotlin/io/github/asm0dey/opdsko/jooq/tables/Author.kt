/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables


import io.github.asm0dey.opdsko.jooq.DefaultSchema
import io.github.asm0dey.opdsko.jooq.indexes.AUTHOR_ADDED
import io.github.asm0dey.opdsko.jooq.indexes.AUTHOR_NAMES
import io.github.asm0dey.opdsko.jooq.keys.AUTHOR__PK_AUTHOR
import io.github.asm0dey.opdsko.jooq.keys.BOOK_AUTHOR__FK_BOOK_AUTHOR_PK_AUTHOR
import io.github.asm0dey.opdsko.jooq.tables.Book.BookPath
import io.github.asm0dey.opdsko.jooq.tables.BookAuthor.BookAuthorPath
import io.github.asm0dey.opdsko.jooq.tables.records.AuthorRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Author(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, AuthorRecord>?,
    parentPath: InverseForeignKey<out Record, AuthorRecord>?,
    aliased: Table<AuthorRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<AuthorRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>author</code>
         */
        val AUTHOR: Author = Author()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthorRecord> = AuthorRecord::class.java

    /**
     * The column <code>author.id</code>.
     */
    val ID: TableField<AuthorRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.identity(true), this, "")

    /**
     * The column <code>author.fb2id</code>.
     */
    val FB2ID: TableField<AuthorRecord, String?> = createField(DSL.name("fb2id"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>author.first_name</code>.
     */
    val FIRST_NAME: TableField<AuthorRecord, String?> = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>author.middle_name</code>.
     */
    val MIDDLE_NAME: TableField<AuthorRecord, String?> = createField(DSL.name("middle_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>author.last_name</code>.
     */
    val LAST_NAME: TableField<AuthorRecord, String?> = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>author.nickname</code>.
     */
    val NICKNAME: TableField<AuthorRecord, String?> = createField(DSL.name("nickname"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>author.added</code>.
     */
    val ADDED: TableField<AuthorRecord, LocalDateTime?> = createField(DSL.name("added"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AuthorRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<AuthorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<AuthorRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>author</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>author</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>author</code> table reference
     */
    constructor(): this(DSL.name("author"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthorRecord>?, parentPath: InverseForeignKey<out Record, AuthorRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, AUTHOR, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AuthorPath : Author, Path<AuthorRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthorRecord>?, parentPath: InverseForeignKey<out Record, AuthorRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<AuthorRecord>): super(alias, aliased)
        override fun `as`(alias: String): AuthorPath = AuthorPath(DSL.name(alias), this)
        override fun `as`(alias: Name): AuthorPath = AuthorPath(alias, this)
        override fun `as`(alias: Table<*>): AuthorPath = AuthorPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(AUTHOR_ADDED, AUTHOR_NAMES)
    override fun getIdentity(): Identity<AuthorRecord, Long?> = super.getIdentity() as Identity<AuthorRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<AuthorRecord> = AUTHOR__PK_AUTHOR

    private lateinit var _bookAuthor: BookAuthorPath

    /**
     * Get the implicit to-many join path to the <code>book_author</code> table
     */
    fun bookAuthor(): BookAuthorPath {
        if (!this::_bookAuthor.isInitialized)
            _bookAuthor = BookAuthorPath(this, null, BOOK_AUTHOR__FK_BOOK_AUTHOR_PK_AUTHOR.inverseKey)

        return _bookAuthor;
    }

    val bookAuthor: BookAuthorPath
        get(): BookAuthorPath = bookAuthor()

    /**
     * Get the implicit many-to-many join path to the <code>book</code> table
     */
    val book: BookPath
        get(): BookPath = bookAuthor().book()
    override fun `as`(alias: String): Author = Author(DSL.name(alias), this)
    override fun `as`(alias: Name): Author = Author(alias, this)
    override fun `as`(alias: Table<*>): Author = Author(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Author = Author(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Author = Author(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Author = Author(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Author = Author(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Author = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Author = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Author = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Author = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Author = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Author = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Author = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Author = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Author = where(DSL.notExists(select))
}
