/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.daos


import io.github.asm0dey.opdsko.jooq.tables.BookAuthor
import io.github.asm0dey.opdsko.jooq.tables.records.BookAuthorRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookAuthorDao(configuration: Configuration?) : DAOImpl<BookAuthorRecord, io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor, Record2<Long?, Long?>>(BookAuthor.BOOK_AUTHOR, io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor::class.java, configuration) {

    /**
     * Create a new BookAuthorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor): Record2<Long?, Long?> = compositeKeyRecord(o.bookId, o.authorId)

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfBookId(lowerInclusive: Long, upperInclusive: Long): List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor> = fetchRange(BookAuthor.BOOK_AUTHOR.BOOK_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    fun fetchByBookId(vararg values: Long): List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor> = fetch(BookAuthor.BOOK_AUTHOR.BOOK_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAuthorId(lowerInclusive: Long, upperInclusive: Long): List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor> = fetchRange(BookAuthor.BOOK_AUTHOR.AUTHOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    fun fetchByAuthorId(vararg values: Long): List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor> = fetch(BookAuthor.BOOK_AUTHOR.AUTHOR_ID, *values.toTypedArray())
}
