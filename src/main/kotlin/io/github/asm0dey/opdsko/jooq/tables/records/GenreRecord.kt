/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.records


import io.github.asm0dey.opdsko.jooq.tables.Genre
import io.github.asm0dey.opdsko.jooq.tables.interfaces.IGenre

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GenreRecord private constructor() : UpdatableRecordImpl<GenreRecord>(Genre.GENRE), IGenre {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IGenre) {
        this.id = from.id
        this.name = from.name
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GenreRecord
     */
    constructor(id: Long?, name: String): this() {
        this.id = id
        this.name = name
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GenreRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.tables.pojos.Genre?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            resetChangedOnNotNull()
        }
    }
}
