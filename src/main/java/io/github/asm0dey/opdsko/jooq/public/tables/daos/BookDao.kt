/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.`public`.tables.daos


import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookDao(configuration: Configuration?) : DAOImpl<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book, Long>(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK, io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book::class.java, configuration) {

    /**
     * Create a new BookDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book? = fetchOne(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ID, value)

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPath(lowerInclusive: String, upperInclusive: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.PATH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    fun fetchByPath(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.PATH, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.NAME, *values)

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDate(lowerInclusive: String?, upperInclusive: String?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    fun fetchByDate(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.DATE, *values)

    /**
     * Fetch records that have <code>added BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAdded(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ADDED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>added IN (values)</code>
     */
    fun fetchByAdded(vararg values: OffsetDateTime): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ADDED, *values)

    /**
     * Fetch records that have <code>sequence BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSequence(lowerInclusive: String?, upperInclusive: String?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQUENCE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sequence IN (values)</code>
     */
    fun fetchBySequence(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQUENCE, *values)

    /**
     * Fetch records that have <code>sequence_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSequenceNumber(lowerInclusive: Long?, upperInclusive: Long?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQUENCE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sequence_number IN (values)</code>
     */
    fun fetchBySequenceNumber(vararg values: Long): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQUENCE_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>lang BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLang(lowerInclusive: String?, upperInclusive: String?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.LANG, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lang IN (values)</code>
     */
    fun fetchByLang(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.LANG, *values)

    /**
     * Fetch records that have <code>zip_file BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfZipFile(lowerInclusive: String?, upperInclusive: String?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ZIP_FILE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>zip_file IN (values)</code>
     */
    fun fetchByZipFile(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.ZIP_FILE, *values)

    /**
     * Fetch records that have <code>seqid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSeqid(lowerInclusive: Int?, upperInclusive: Int?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>seqid IN (values)</code>
     */
    fun fetchBySeqid(vararg values: Int): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK.SEQID, *values.toTypedArray())
}
