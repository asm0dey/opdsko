/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables;


import io.github.asm0dey.opdsko.jooq.DefaultSchema;
import io.github.asm0dey.opdsko.jooq.tables.records.AuthorsFtsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorsFts extends TableImpl<AuthorsFtsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>authors_fts</code>
     */
    public static final AuthorsFts AUTHORS_FTS = new AuthorsFts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsFtsRecord> getRecordType() {
        return AuthorsFtsRecord.class;
    }

    /**
     * The column <code>authors_fts.last_name</code>.
     */
    public final TableField<AuthorsFtsRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>authors_fts.first_name</code>.
     */
    public final TableField<AuthorsFtsRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>authors_fts.middle_name</code>.
     */
    public final TableField<AuthorsFtsRecord, String> MIDDLE_NAME = createField(DSL.name("middle_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>authors_fts.nickname</code>.
     */
    public final TableField<AuthorsFtsRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.CLOB, this, "");

    private AuthorsFts(Name alias, Table<AuthorsFtsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AuthorsFts(Name alias, Table<AuthorsFtsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>authors_fts</code> table reference
     */
    public AuthorsFts(String alias) {
        this(DSL.name(alias), AUTHORS_FTS);
    }

    /**
     * Create an aliased <code>authors_fts</code> table reference
     */
    public AuthorsFts(Name alias) {
        this(alias, AUTHORS_FTS);
    }

    /**
     * Create a <code>authors_fts</code> table reference
     */
    public AuthorsFts() {
        this(DSL.name("authors_fts"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public AuthorsFts as(String alias) {
        return new AuthorsFts(DSL.name(alias), this);
    }

    @Override
    public AuthorsFts as(Name alias) {
        return new AuthorsFts(alias, this);
    }

    @Override
    public AuthorsFts as(Table<?> alias) {
        return new AuthorsFts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsFts rename(String name) {
        return new AuthorsFts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsFts rename(Name name) {
        return new AuthorsFts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsFts rename(Table<?> name) {
        return new AuthorsFts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts where(Condition condition) {
        return new AuthorsFts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsFts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsFts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsFts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsFts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsFts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
