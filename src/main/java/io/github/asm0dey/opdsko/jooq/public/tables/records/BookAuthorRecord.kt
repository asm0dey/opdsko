/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.`public`.tables.records


import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookAuthorRecord private constructor() : TableRecordImpl<BookAuthorRecord>(io.github.asm0dey.opdsko.jooq.`public`.tables.BookAuthor.BOOK_AUTHOR), io.github.asm0dey.opdsko.jooq.`public`.tables.interfaces.IBookAuthor {

    open override var bookId: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open override var authorId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: io.github.asm0dey.opdsko.jooq.`public`.tables.interfaces.IBookAuthor) {
        this.bookId = from.bookId
        this.authorId = from.authorId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookAuthorRecord
     */
    constructor(bookId: Long, authorId: Long): this() {
        this.bookId = bookId
        this.authorId = authorId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookAuthorRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.BookAuthor?): this() {
        if (value != null) {
            this.bookId = value.bookId
            this.authorId = value.authorId
            resetChangedOnNotNull()
        }
    }
}
