/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.`public`.tables.records


import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookRecord private constructor() : UpdatableRecordImpl<BookRecord>(io.github.asm0dey.opdsko.jooq.`public`.tables.Book.BOOK), io.github.asm0dey.opdsko.jooq.`public`.tables.interfaces.IBook {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var path: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open override var name: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open override var date: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open override var added: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    open override var sequence: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open override var sequenceNumber: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open override var lang: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open override var zipFile: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open override var seqid: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: io.github.asm0dey.opdsko.jooq.`public`.tables.interfaces.IBook) {
        this.id = from.id
        this.path = from.path
        this.name = from.name
        this.date = from.date
        this.added = from.added
        this.sequence = from.sequence
        this.sequenceNumber = from.sequenceNumber
        this.lang = from.lang
        this.zipFile = from.zipFile
        this.seqid = from.seqid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(id: Long? = null, path: String, name: String, date: String? = null, added: OffsetDateTime? = null, sequence: String? = null, sequenceNumber: Long? = null, lang: String? = null, zipFile: String? = null, seqid: Int? = null): this() {
        this.id = id
        this.path = path
        this.name = name
        this.date = date
        this.added = added
        this.sequence = sequence
        this.sequenceNumber = sequenceNumber
        this.lang = lang
        this.zipFile = zipFile
        this.seqid = seqid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Book?): this() {
        if (value != null) {
            this.id = value.id
            this.path = value.path
            this.name = value.name
            this.date = value.date
            this.added = value.added
            this.sequence = value.sequence
            this.sequenceNumber = value.sequenceNumber
            this.lang = value.lang
            this.zipFile = value.zipFile
            this.seqid = value.seqid
            resetChangedOnNotNull()
        }
    }
}
