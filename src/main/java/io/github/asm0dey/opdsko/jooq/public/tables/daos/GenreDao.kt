/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.`public`.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GenreDao(configuration: Configuration?) : DAOImpl<io.github.asm0dey.opdsko.jooq.`public`.tables.records.GenreRecord, io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre, Long>(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE, io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre::class.java, configuration) {

    /**
     * Create a new GenreDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre? = fetchOne(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre> = fetchRange(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre> = fetch(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.NAME, *values)

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    fun fetchOneByName(value: String): io.github.asm0dey.opdsko.jooq.`public`.tables.pojos.Genre? = fetchOne(io.github.asm0dey.opdsko.jooq.`public`.tables.Genre.GENRE.NAME, value)
}
