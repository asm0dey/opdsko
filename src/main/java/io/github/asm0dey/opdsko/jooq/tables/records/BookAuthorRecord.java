/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.records;


import io.github.asm0dey.opdsko.jooq.tables.BookAuthor;
import io.github.asm0dey.opdsko.jooq.tables.interfaces.IBookAuthor;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookAuthorRecord extends UpdatableRecordImpl<BookAuthorRecord> implements IBookAuthor {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>book_author.book_id</code>.
     */
    public BookAuthorRecord setBookId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>book_author.book_id</code>.
     */
    @Override
    public Long getBookId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>book_author.author_id</code>.
     */
    public BookAuthorRecord setAuthorId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>book_author.author_id</code>.
     */
    @Override
    public Long getAuthorId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IBookAuthor from) {
        setBookId(from.getBookId());
        setAuthorId(from.getAuthorId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookAuthorRecord
     */
    public BookAuthorRecord() {
        super(BookAuthor.BOOK_AUTHOR);
    }

    /**
     * Create a detached, initialised BookAuthorRecord
     */
    public BookAuthorRecord(Long bookId, Long authorId) {
        super(BookAuthor.BOOK_AUTHOR);

        setBookId(bookId);
        setAuthorId(authorId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised BookAuthorRecord
     */
    public BookAuthorRecord(io.github.asm0dey.opdsko.jooq.tables.pojos.BookAuthor value) {
        super(BookAuthor.BOOK_AUTHOR);

        if (value != null) {
            setBookId(value.getBookId());
            setAuthorId(value.getAuthorId());
            resetChangedOnNotNull();
        }
    }
}
