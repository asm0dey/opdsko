/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.BookNgrIdx
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records.RankHybridRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RankHybrid(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RankHybridRecord>?,
    parentPath: InverseForeignKey<out Record, RankHybridRecord>?,
    aliased: Table<RankHybridRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RankHybridRecord>(
    alias,
    BookNgrIdx.BOOK_NGR_IDX,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>book_ngr_idx.rank_hybrid</code>
         */
        val RANK_HYBRID: RankHybrid = RankHybrid()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RankHybridRecord> = RankHybridRecord::class.java

    /**
     * The column <code>book_ngr_idx.rank_hybrid.id</code>.
     */
    val ID: TableField<RankHybridRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>book_ngr_idx.rank_hybrid.rank_hybrid</code>.
     */
    val RANK_HYBRID_: TableField<RankHybridRecord, Float?> = createField(DSL.name("rank_hybrid"), SQLDataType.REAL, this, "")

    private constructor(alias: Name, aliased: Table<RankHybridRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.REAL.defaultValue(DSL.field(DSL.raw("0.5"), SQLDataType.REAL))),
        DSL.value(null, SQLDataType.REAL.defaultValue(DSL.field(DSL.raw("0.5"), SQLDataType.REAL)))
    ), null)
    private constructor(alias: Name, aliased: Table<RankHybridRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>book_ngr_idx.rank_hybrid</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>book_ngr_idx.rank_hybrid</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>book_ngr_idx.rank_hybrid</code> table reference
     */
    constructor(): this(DSL.name("rank_hybrid"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BookNgrIdx.BOOK_NGR_IDX
    override fun `as`(alias: String): RankHybrid = RankHybrid(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): RankHybrid = RankHybrid(alias, this, parameters)
    override fun `as`(alias: Table<*>): RankHybrid = RankHybrid(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): RankHybrid = RankHybrid(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RankHybrid = RankHybrid(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RankHybrid = RankHybrid(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          bm25Query: String?
        , similarityQuery: String?
        , similarityLimitN: Int?
        , bm25LimitN: Int?
        , similarityWeight: Float?
        , bm25Weight: Float?
    ): RankHybrid = RankHybrid(DSL.name("rank_hybrid"), null, arrayOf(
        DSL.value(bm25Query, SQLDataType.CLOB),
        DSL.value(similarityQuery, SQLDataType.CLOB),
        DSL.value(similarityLimitN, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.INTEGER))),
        DSL.value(bm25LimitN, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.INTEGER))),
        DSL.value(similarityWeight, SQLDataType.REAL.defaultValue(DSL.field(DSL.raw("0.5"), SQLDataType.REAL))),
        DSL.value(bm25Weight, SQLDataType.REAL.defaultValue(DSL.field(DSL.raw("0.5"), SQLDataType.REAL)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          bm25Query: Field<String?>
        , similarityQuery: Field<String?>
        , similarityLimitN: Field<Int?>
        , bm25LimitN: Field<Int?>
        , similarityWeight: Field<Float?>
        , bm25Weight: Field<Float?>
    ): RankHybrid = RankHybrid(DSL.name("rank_hybrid"), null, arrayOf(
        bm25Query,
        similarityQuery,
        similarityLimitN,
        bm25LimitN,
        similarityWeight,
        bm25Weight
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
