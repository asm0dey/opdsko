/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.BookNgrIdx
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records.SchemaRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Schema(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SchemaRecord>?,
    parentPath: InverseForeignKey<out Record, SchemaRecord>?,
    aliased: Table<SchemaRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SchemaRecord>(
    alias,
    BookNgrIdx.BOOK_NGR_IDX,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>book_ngr_idx.schema</code>
         */
        val SCHEMA: Schema = Schema()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SchemaRecord> = SchemaRecord::class.java

    /**
     * The column <code>book_ngr_idx.schema.name</code>.
     */
    val NAME: TableField<SchemaRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.schema.field_type</code>.
     */
    val FIELD_TYPE: TableField<SchemaRecord, String?> = createField(DSL.name("field_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.schema.stored</code>.
     */
    val STORED: TableField<SchemaRecord, Boolean?> = createField(DSL.name("stored"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>book_ngr_idx.schema.indexed</code>.
     */
    val INDEXED: TableField<SchemaRecord, Boolean?> = createField(DSL.name("indexed"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>book_ngr_idx.schema.fast</code>.
     */
    val FAST: TableField<SchemaRecord, Boolean?> = createField(DSL.name("fast"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>book_ngr_idx.schema.fieldnorms</code>.
     */
    val FIELDNORMS: TableField<SchemaRecord, Boolean?> = createField(DSL.name("fieldnorms"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>book_ngr_idx.schema.expand_dots</code>.
     */
    val EXPAND_DOTS: TableField<SchemaRecord, Boolean?> = createField(DSL.name("expand_dots"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>book_ngr_idx.schema.tokenizer</code>.
     */
    val TOKENIZER: TableField<SchemaRecord, String?> = createField(DSL.name("tokenizer"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.schema.record</code>.
     */
    val RECORD: TableField<SchemaRecord, String?> = createField(DSL.name("record"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.schema.normalizer</code>.
     */
    val NORMALIZER: TableField<SchemaRecord, String?> = createField(DSL.name("normalizer"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<SchemaRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<SchemaRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>book_ngr_idx.schema</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>book_ngr_idx.schema</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>book_ngr_idx.schema</code> table reference
     */
    constructor(): this(DSL.name("schema"), null)
    override fun getSchema(): org.jooq.Schema? = if (aliased()) null else BookNgrIdx.BOOK_NGR_IDX
    override fun `as`(alias: String): Schema = Schema(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): Schema = Schema(alias, this, parameters)
    override fun `as`(alias: Table<*>): Schema = Schema(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): Schema = Schema(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Schema = Schema(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Schema = Schema(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): Schema = Schema(DSL.name("schema"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
