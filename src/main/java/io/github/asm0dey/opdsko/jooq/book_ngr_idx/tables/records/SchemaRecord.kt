/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.Schema
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.interfaces.ISchema

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemaRecord private constructor() : TableRecordImpl<SchemaRecord>(Schema.SCHEMA), ISchema {

    open override var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open override var fieldType: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open override var stored: Boolean?
        set(value): Unit = set(2, value)
        get(): Boolean? = get(2) as Boolean?

    open override var indexed: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    open override var fast: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open override var fieldnorms: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open override var expandDots: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    open override var tokenizer: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open override var record: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open override var normalizer: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: ISchema) {
        this.name = from.name
        this.fieldType = from.fieldType
        this.stored = from.stored
        this.indexed = from.indexed
        this.fast = from.fast
        this.fieldnorms = from.fieldnorms
        this.expandDots = from.expandDots
        this.tokenizer = from.tokenizer
        this.record = from.record
        this.normalizer = from.normalizer
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised SchemaRecord
     */
    constructor(name: String? = null, fieldType: String? = null, stored: Boolean? = null, indexed: Boolean? = null, fast: Boolean? = null, fieldnorms: Boolean? = null, expandDots: Boolean? = null, tokenizer: String? = null, record: String? = null, normalizer: String? = null): this() {
        this.name = name
        this.fieldType = fieldType
        this.stored = stored
        this.indexed = indexed
        this.fast = fast
        this.fieldnorms = fieldnorms
        this.expandDots = expandDots
        this.tokenizer = tokenizer
        this.record = record
        this.normalizer = normalizer
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised SchemaRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.pojos.Schema?): this() {
        if (value != null) {
            this.name = value.name
            this.fieldType = value.fieldType
            this.stored = value.stored
            this.indexed = value.indexed
            this.fast = value.fast
            this.fieldnorms = value.fieldnorms
            this.expandDots = value.expandDots
            this.tokenizer = value.tokenizer
            this.record = value.record
            this.normalizer = value.normalizer
            resetChangedOnNotNull()
        }
    }
}
