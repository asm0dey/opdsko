/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.BookNgrIdx
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records.RankRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Rank(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RankRecord>?,
    parentPath: InverseForeignKey<out Record, RankRecord>?,
    aliased: Table<RankRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RankRecord>(
    alias,
    BookNgrIdx.BOOK_NGR_IDX,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>book_ngr_idx.rank</code>
         */
        val RANK: Rank = Rank()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RankRecord> = RankRecord::class.java

    /**
     * The column <code>book_ngr_idx.rank.id</code>.
     */
    val ID: TableField<RankRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>book_ngr_idx.rank.rank_bm25</code>.
     */
    val RANK_BM25: TableField<RankRecord, Float?> = createField(DSL.name("rank_bm25"), SQLDataType.REAL, this, "")

    private constructor(alias: Name, aliased: Table<RankRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    ), null)
    private constructor(alias: Name, aliased: Table<RankRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>book_ngr_idx.rank</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>book_ngr_idx.rank</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>book_ngr_idx.rank</code> table reference
     */
    constructor(): this(DSL.name("rank"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BookNgrIdx.BOOK_NGR_IDX
    override fun `as`(alias: String): Rank = Rank(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): Rank = Rank(alias, this, parameters)
    override fun `as`(alias: Table<*>): Rank = Rank(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): Rank = Rank(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Rank = Rank(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Rank = Rank(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          query: String?
        , offsetRows: Int?
        , limitRows: Int?
        , fuzzyFields: String?
        , distance: Int?
        , transposeCostOne: Boolean?
        , prefix: Boolean?
        , regexFields: String?
        , maxNumChars: Int?
        , highlightField: String?
    ): Rank = Rank(DSL.name("rank"), null, arrayOf(
        DSL.value(query, SQLDataType.CLOB),
        DSL.value(offsetRows, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(limitRows, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(fuzzyFields, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(distance, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(transposeCostOne, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(prefix, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(regexFields, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(maxNumChars, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(highlightField, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          query: Field<String?>
        , offsetRows: Field<Int?>
        , limitRows: Field<Int?>
        , fuzzyFields: Field<String?>
        , distance: Field<Int?>
        , transposeCostOne: Field<Boolean?>
        , prefix: Field<Boolean?>
        , regexFields: Field<String?>
        , maxNumChars: Field<Int?>
        , highlightField: Field<String?>
    ): Rank = Rank(DSL.name("rank"), null, arrayOf(
        query,
        offsetRows,
        limitRows,
        fuzzyFields,
        distance,
        transposeCostOne,
        prefix,
        regexFields,
        maxNumChars,
        highlightField
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
