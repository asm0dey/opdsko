/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.BookNgrIdx

import java.time.LocalDateTime
import java.time.OffsetDateTime

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Search(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>?,
    parentPath: InverseForeignKey<out Record, io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>?,
    aliased: Table<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>(
    alias,
    BookNgrIdx.BOOK_NGR_IDX,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>book_ngr_idx.search</code>
         */
        val SEARCH: Search = Search()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord> = io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord::class.java

    /**
     * The column <code>book_ngr_idx.search.id</code>.
     */
    val ID: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true).defaultValue(DSL.field(DSL.raw("nextval('book_id_seq'::regclass)"), SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>book_ngr_idx.search.path</code>.
     */
    val PATH: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, String?> = createField(DSL.name("path"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>book_ngr_idx.search.name</code>.
     */
    val NAME: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>book_ngr_idx.search.date</code>.
     */
    val DATE: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, LocalDateTime?> = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>book_ngr_idx.search.added</code>.
     */
    val ADDED: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, OffsetDateTime?> = createField(DSL.name("added"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>book_ngr_idx.search.sequence</code>.
     */
    val SEQUENCE: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, String?> = createField(DSL.name("sequence"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.search.sequence_number</code>.
     */
    val SEQUENCE_NUMBER: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, Long?> = createField(DSL.name("sequence_number"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>book_ngr_idx.search.lang</code>.
     */
    val LANG: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, String?> = createField(DSL.name("lang"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.search.zip_file</code>.
     */
    val ZIP_FILE: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, String?> = createField(DSL.name("zip_file"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>book_ngr_idx.search.seqid</code>.
     */
    val SEQID: TableField<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, Int?> = createField(DSL.name("seqid"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    ), null)
    private constructor(alias: Name, aliased: Table<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>book_ngr_idx.search</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>book_ngr_idx.search</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>book_ngr_idx.search</code> table reference
     */
    constructor(): this(DSL.name("search"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BookNgrIdx.BOOK_NGR_IDX
    override fun getIdentity(): Identity<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, Long?> = super.getIdentity() as Identity<io.github.asm0dey.opdsko.jooq.`public`.tables.records.BookRecord, Long?>
    override fun `as`(alias: String): Search = Search(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): Search = Search(alias, this, parameters)
    override fun `as`(alias: Table<*>): Search = Search(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): Search = Search(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Search = Search(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Search = Search(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          query: String?
        , offsetRows: Int?
        , limitRows: Int?
        , fuzzyFields: String?
        , distance: Int?
        , transposeCostOne: Boolean?
        , prefix: Boolean?
        , regexFields: String?
        , maxNumChars: Int?
        , highlightField: String?
    ): Search = Search(DSL.name("search"), null, arrayOf(
        DSL.value(query, SQLDataType.CLOB),
        DSL.value(offsetRows, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(limitRows, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(fuzzyFields, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(distance, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(transposeCostOne, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(prefix, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL::boolean"), SQLDataType.BOOLEAN))),
        DSL.value(regexFields, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(maxNumChars, SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER))),
        DSL.value(highlightField, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          query: Field<String?>
        , offsetRows: Field<Int?>
        , limitRows: Field<Int?>
        , fuzzyFields: Field<String?>
        , distance: Field<Int?>
        , transposeCostOne: Field<Boolean?>
        , prefix: Field<Boolean?>
        , regexFields: Field<String?>
        , maxNumChars: Field<Int?>
        , highlightField: Field<String?>
    ): Search = Search(DSL.name("search"), null, arrayOf(
        query,
        offsetRows,
        limitRows,
        fuzzyFields,
        distance,
        transposeCostOne,
        prefix,
        regexFields,
        maxNumChars,
        highlightField
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
