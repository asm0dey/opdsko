/*
 * opdsko
 * Copyright (C) 2022  asm0dey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.records;


import io.github.asm0dey.opdsko.jooq.tables.Book;
import io.github.asm0dey.opdsko.jooq.tables.interfaces.IBook;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record8<Long, String, String, String, LocalDateTime, String, Integer, String>, IBook {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>book.id</code>.
     */
    public BookRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>book.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>book.path</code>.
     */
    public BookRecord setPath(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>book.path</code>.
     */
    @Override
    public String getPath() {
        return (String) get(1);
    }

    /**
     * Setter for <code>book.name</code>.
     */
    public BookRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>book.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>book.date</code>.
     */
    public BookRecord setDate(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>book.date</code>.
     */
    @Override
    public String getDate() {
        return (String) get(3);
    }

    /**
     * Setter for <code>book.added</code>.
     */
    public BookRecord setAdded(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>book.added</code>.
     */
    @Override
    public LocalDateTime getAdded() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>book.sequence</code>.
     */
    public BookRecord setSequence(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>book.sequence</code>.
     */
    @Override
    public String getSequence() {
        return (String) get(5);
    }

    /**
     * Setter for <code>book.sequence_number</code>.
     */
    public BookRecord setSequenceNumber(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>book.sequence_number</code>.
     */
    @Override
    public Integer getSequenceNumber() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>book.lang</code>.
     */
    public BookRecord setLang(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>book.lang</code>.
     */
    @Override
    public String getLang() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, LocalDateTime, String, Integer, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, LocalDateTime, String, Integer, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Book.BOOK.ID;
    }

    @Override
    public Field<String> field2() {
        return Book.BOOK.PATH;
    }

    @Override
    public Field<String> field3() {
        return Book.BOOK.NAME;
    }

    @Override
    public Field<String> field4() {
        return Book.BOOK.DATE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Book.BOOK.ADDED;
    }

    @Override
    public Field<String> field6() {
        return Book.BOOK.SEQUENCE;
    }

    @Override
    public Field<Integer> field7() {
        return Book.BOOK.SEQUENCE_NUMBER;
    }

    @Override
    public Field<String> field8() {
        return Book.BOOK.LANG;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPath();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getDate();
    }

    @Override
    public LocalDateTime component5() {
        return getAdded();
    }

    @Override
    public String component6() {
        return getSequence();
    }

    @Override
    public Integer component7() {
        return getSequenceNumber();
    }

    @Override
    public String component8() {
        return getLang();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPath();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getDate();
    }

    @Override
    public LocalDateTime value5() {
        return getAdded();
    }

    @Override
    public String value6() {
        return getSequence();
    }

    @Override
    public Integer value7() {
        return getSequenceNumber();
    }

    @Override
    public String value8() {
        return getLang();
    }

    @Override
    public BookRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BookRecord value2(String value) {
        setPath(value);
        return this;
    }

    @Override
    public BookRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public BookRecord value4(String value) {
        setDate(value);
        return this;
    }

    @Override
    public BookRecord value5(LocalDateTime value) {
        setAdded(value);
        return this;
    }

    @Override
    public BookRecord value6(String value) {
        setSequence(value);
        return this;
    }

    @Override
    public BookRecord value7(Integer value) {
        setSequenceNumber(value);
        return this;
    }

    @Override
    public BookRecord value8(String value) {
        setLang(value);
        return this;
    }

    @Override
    public BookRecord values(Long value1, String value2, String value3, String value4, LocalDateTime value5, String value6, Integer value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IBook from) {
        setId(from.getId());
        setPath(from.getPath());
        setName(from.getName());
        setDate(from.getDate());
        setAdded(from.getAdded());
        setSequence(from.getSequence());
        setSequenceNumber(from.getSequenceNumber());
        setLang(from.getLang());
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(Long id, String path, String name, String date, LocalDateTime added, String sequence, Integer sequenceNumber, String lang) {
        super(Book.BOOK);

        setId(id);
        setPath(path);
        setName(name);
        setDate(date);
        setAdded(added);
        setSequence(sequence);
        setSequenceNumber(sequenceNumber);
        setLang(lang);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(io.github.asm0dey.opdsko.jooq.tables.pojos.Book value) {
        super(Book.BOOK);

        if (value != null) {
            setId(value.getId());
            setPath(value.getPath());
            setName(value.getName());
            setDate(value.getDate());
            setAdded(value.getAdded());
            setSequence(value.getSequence());
            setSequenceNumber(value.getSequenceNumber());
            setLang(value.getLang());
        }
    }
}
