/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.daos;


import io.github.asm0dey.opdsko.jooq.tables.Author;
import io.github.asm0dey.opdsko.jooq.tables.records.AuthorRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorDao extends DAOImpl<AuthorRecord, io.github.asm0dey.opdsko.jooq.tables.pojos.Author, Long> {

    /**
     * Create a new AuthorDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, io.github.asm0dey.opdsko.jooq.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorDao with an attached configuration
     */
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, io.github.asm0dey.opdsko.jooq.tables.pojos.Author.class, configuration);
    }

    @Override
    public Long getId(io.github.asm0dey.opdsko.jooq.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchById(Long... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.asm0dey.opdsko.jooq.tables.pojos.Author fetchOneById(Long value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchOptionalById(Long value) {
        return fetchOptional(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>fb2id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfFb2id(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FB2ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fb2id IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByFb2id(String... values) {
        return fetch(Author.AUTHOR.FB2ID, values);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByFirstName(String... values) {
        return fetch(Author.AUTHOR.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>middle_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfMiddleName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.MIDDLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>middle_name IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByMiddleName(String... values) {
        return fetch(Author.AUTHOR.MIDDLE_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByLastName(String... values) {
        return fetch(Author.AUTHOR.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfNickname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.NICKNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByNickname(String... values) {
        return fetch(Author.AUTHOR.NICKNAME, values);
    }

    /**
     * Fetch records that have <code>added BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchRangeOfAdded(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Author.AUTHOR.ADDED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>added IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.Author> fetchByAdded(LocalDateTime... values) {
        return fetch(Author.AUTHOR.ADDED, values);
    }
}
