/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.Rank
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.interfaces.IRank

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RankRecord private constructor() : TableRecordImpl<RankRecord>(Rank.RANK), IRank {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var rankBm25: Float?
        set(value): Unit = set(1, value)
        get(): Float? = get(1) as Float?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IRank) {
        this.id = from.id
        this.rankBm25 = from.rankBm25
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RankRecord
     */
    constructor(id: Long? = null, rankBm25: Float? = null): this() {
        this.id = id
        this.rankBm25 = rankBm25
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RankRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.pojos.Rank?): this() {
        if (value != null) {
            this.id = value.id
            this.rankBm25 = value.rankBm25
            resetChangedOnNotNull()
        }
    }
}
