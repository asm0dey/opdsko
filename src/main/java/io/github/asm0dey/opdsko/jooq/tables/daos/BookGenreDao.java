/*
 * opdsko
 * Copyright (C) 2022  asm0dey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables.daos;


import io.github.asm0dey.opdsko.jooq.tables.BookGenre;
import io.github.asm0dey.opdsko.jooq.tables.records.BookGenreRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookGenreDao extends DAOImpl<BookGenreRecord, io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre, Record2<Long, Long>> {

    /**
     * Create a new BookGenreDao without any configuration
     */
    public BookGenreDao() {
        super(BookGenre.BOOK_GENRE, io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre.class);
    }

    /**
     * Create a new BookGenreDao with an attached configuration
     */
    public BookGenreDao(Configuration configuration) {
        super(BookGenre.BOOK_GENRE, io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre object) {
        return compositeKeyRecord(object.getBookId(), object.getGenreId());
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre> fetchRangeOfBookId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookGenre.BOOK_GENRE.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre> fetchByBookId(Long... values) {
        return fetch(BookGenre.BOOK_GENRE.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>genre_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre> fetchRangeOfGenreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookGenre.BOOK_GENRE.GENRE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>genre_id IN (values)</code>
     */
    public List<io.github.asm0dey.opdsko.jooq.tables.pojos.BookGenre> fetchByGenreId(Long... values) {
        return fetch(BookGenre.BOOK_GENRE.GENRE_ID, values);
    }
}
