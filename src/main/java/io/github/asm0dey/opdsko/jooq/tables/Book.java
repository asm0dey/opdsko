/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.tables;


import io.github.asm0dey.opdsko.jooq.DefaultSchema;
import io.github.asm0dey.opdsko.jooq.Indexes;
import io.github.asm0dey.opdsko.jooq.Keys;
import io.github.asm0dey.opdsko.jooq.tables.Author.AuthorPath;
import io.github.asm0dey.opdsko.jooq.tables.BookAuthor.BookAuthorPath;
import io.github.asm0dey.opdsko.jooq.tables.BookGenre.BookGenrePath;
import io.github.asm0dey.opdsko.jooq.tables.Genre.GenrePath;
import io.github.asm0dey.opdsko.jooq.tables.records.BookRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>book.id</code>.
     */
    public final TableField<BookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.identity(true), this, "");

    /**
     * The column <code>book.path</code>.
     */
    public final TableField<BookRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>book.name</code>.
     */
    public final TableField<BookRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>book.date</code>.
     */
    public final TableField<BookRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>book.added</code>.
     */
    public final TableField<BookRecord, LocalDateTime> ADDED = createField(DSL.name("added"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>book.sequence</code>.
     */
    public final TableField<BookRecord, String> SEQUENCE = createField(DSL.name("sequence"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>book.sequence_number</code>.
     */
    public final TableField<BookRecord, Integer> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>book.lang</code>.
     */
    public final TableField<BookRecord, String> LANG = createField(DSL.name("lang"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>book.zip_file</code>.
     */
    public final TableField<BookRecord, String> ZIP_FILE = createField(DSL.name("zip_file"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>book.seqid</code>.
     */
    public final TableField<BookRecord, Integer> SEQID = createField(DSL.name("seqid"), SQLDataType.INTEGER, this, "");

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>book</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>book</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>book</code> table reference
     */
    public Book() {
        this(DSL.name("book"), null);
    }

    public <O extends Record> Book(Table<O> path, ForeignKey<O, BookRecord> childPath, InverseForeignKey<O, BookRecord> parentPath) {
        super(path, childPath, parentPath, BOOK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookPath extends Book implements Path<BookRecord> {
        public <O extends Record> BookPath(Table<O> path, ForeignKey<O, BookRecord> childPath, InverseForeignKey<O, BookRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookPath(Name alias, Table<BookRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookPath as(String alias) {
            return new BookPath(DSL.name(alias), this);
        }

        @Override
        public BookPath as(Name alias) {
            return new BookPath(alias, this);
        }

        @Override
        public BookPath as(Table<?> alias) {
            return new BookPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BOOK_ADDED, Indexes.BOOK_SEQ, Indexes.BOOK_SEQUENCE_INDEX);
    }

    @Override
    public Identity<BookRecord, Long> getIdentity() {
        return (Identity<BookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.BOOK__PK_BOOK;
    }

    private transient BookAuthorPath _bookAuthor;

    /**
     * Get the implicit to-many join path to the <code>book_author</code> table
     */
    public BookAuthorPath bookAuthor() {
        if (_bookAuthor == null)
            _bookAuthor = new BookAuthorPath(this, null, Keys.BOOK_AUTHOR__FK_BOOK_AUTHOR_PK_BOOK.getInverseKey());

        return _bookAuthor;
    }

    private transient BookGenrePath _bookGenre;

    /**
     * Get the implicit to-many join path to the <code>book_genre</code> table
     */
    public BookGenrePath bookGenre() {
        if (_bookGenre == null)
            _bookGenre = new BookGenrePath(this, null, Keys.BOOK_GENRE__FK_BOOK_GENRE_PK_BOOK.getInverseKey());

        return _bookGenre;
    }

    /**
     * Get the implicit many-to-many join path to the <code>author</code> table
     */
    public AuthorPath author() {
        return bookAuthor().author();
    }

    /**
     * Get the implicit many-to-many join path to the <code>genre</code> table
     */
    public GenrePath genre() {
        return bookGenre().genre();
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    @Override
    public Book as(Table<?> alias) {
        return new Book(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Table<?> name) {
        return new Book(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book where(Condition condition) {
        return new Book(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Book where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Book where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Book where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Book where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Book whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
