/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.pojos


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.interfaces.ISchema


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class Schema(
    override val name: String? = null,
    override val fieldType: String? = null,
    override val stored: Boolean? = null,
    override val indexed: Boolean? = null,
    override val fast: Boolean? = null,
    override val fieldnorms: Boolean? = null,
    override val expandDots: Boolean? = null,
    override val tokenizer: String? = null,
    override val record: String? = null,
    override val normalizer: String? = null
): ISchema {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Schema = other as Schema
        if (this.name == null) {
            if (o.name != null)
                return false
        }
        else if (this.name != o.name)
            return false
        if (this.fieldType == null) {
            if (o.fieldType != null)
                return false
        }
        else if (this.fieldType != o.fieldType)
            return false
        if (this.stored == null) {
            if (o.stored != null)
                return false
        }
        else if (this.stored != o.stored)
            return false
        if (this.indexed == null) {
            if (o.indexed != null)
                return false
        }
        else if (this.indexed != o.indexed)
            return false
        if (this.fast == null) {
            if (o.fast != null)
                return false
        }
        else if (this.fast != o.fast)
            return false
        if (this.fieldnorms == null) {
            if (o.fieldnorms != null)
                return false
        }
        else if (this.fieldnorms != o.fieldnorms)
            return false
        if (this.expandDots == null) {
            if (o.expandDots != null)
                return false
        }
        else if (this.expandDots != o.expandDots)
            return false
        if (this.tokenizer == null) {
            if (o.tokenizer != null)
                return false
        }
        else if (this.tokenizer != o.tokenizer)
            return false
        if (this.record == null) {
            if (o.record != null)
                return false
        }
        else if (this.record != o.record)
            return false
        if (this.normalizer == null) {
            if (o.normalizer != null)
                return false
        }
        else if (this.normalizer != o.normalizer)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.name == null) 0 else this.name.hashCode())
        result = prime * result + (if (this.fieldType == null) 0 else this.fieldType.hashCode())
        result = prime * result + (if (this.stored == null) 0 else this.stored.hashCode())
        result = prime * result + (if (this.indexed == null) 0 else this.indexed.hashCode())
        result = prime * result + (if (this.fast == null) 0 else this.fast.hashCode())
        result = prime * result + (if (this.fieldnorms == null) 0 else this.fieldnorms.hashCode())
        result = prime * result + (if (this.expandDots == null) 0 else this.expandDots.hashCode())
        result = prime * result + (if (this.tokenizer == null) 0 else this.tokenizer.hashCode())
        result = prime * result + (if (this.record == null) 0 else this.record.hashCode())
        result = prime * result + (if (this.normalizer == null) 0 else this.normalizer.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Schema (")

        sb.append(name)
        sb.append(", ").append(fieldType)
        sb.append(", ").append(stored)
        sb.append(", ").append(indexed)
        sb.append(", ").append(fast)
        sb.append(", ").append(fieldnorms)
        sb.append(", ").append(expandDots)
        sb.append(", ").append(tokenizer)
        sb.append(", ").append(record)
        sb.append(", ").append(normalizer)

        sb.append(")")
        return sb.toString()
    }
}
