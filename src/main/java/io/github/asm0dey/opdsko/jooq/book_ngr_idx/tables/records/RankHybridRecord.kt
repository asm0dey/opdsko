/*
 * This file is generated by jOOQ.
 */
package io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.records


import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.RankHybrid
import io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.interfaces.IRankHybrid

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RankHybridRecord private constructor() : TableRecordImpl<RankHybridRecord>(RankHybrid.RANK_HYBRID), IRankHybrid {

    open override var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var rankHybrid: Float?
        set(value): Unit = set(1, value)
        get(): Float? = get(1) as Float?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IRankHybrid) {
        this.id = from.id
        this.rankHybrid = from.rankHybrid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RankHybridRecord
     */
    constructor(id: Long? = null, rankHybrid: Float? = null): this() {
        this.id = id
        this.rankHybrid = rankHybrid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RankHybridRecord
     */
    constructor(value: io.github.asm0dey.opdsko.jooq.book_ngr_idx.tables.pojos.RankHybrid?): this() {
        if (value != null) {
            this.id = value.id
            this.rankHybrid = value.rankHybrid
            resetChangedOnNotNull()
        }
    }
}
